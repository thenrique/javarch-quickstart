apply plugin: 'eclipse-wtp'
apply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'cargo'

description = "Projeto pré-configurado com Javarch JSF e Hibernate"

configurations.all {
	// check for updates every build
	resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

sourceSets {
	integrationTest {
		java.srcDir file('src/integrationTest/java')
		resources.srcDir file('src/integrationTest/resources')
	}
}

repositories {
    mavenCentral()
	mavenLocal()
//	maven { url "http://www.natalnet.br/~luksrn/mvnrepo/snapshot/"}	
	maven { url 'http://repository.primefaces.org' }
}



dependencies {
	
	integrationTestCompile sourceSets.main.output
	integrationTestCompile configurations.testCompile
	integrationTestCompile sourceSets.test.output
	integrationTestRuntime configurations.testRuntime
	
	def cargoVersion = '1.3.3'
	cargo "org.codehaus.cargo:cargo-core-uberjar:$cargoVersion",
		  "org.codehaus.cargo:cargo-ant:$cargoVersion"

	 
		  
	testCompile 'junit:junit:4.10',
			  "com.h2database:h2:1.3.168",
			  "org.mockito:mockito-all:1.9.5",
			  "org.spockframework:spock-core:0.7-groovy-2.0",
			  // optional dependencies for using Spock
			  "org.hamcrest:hamcrest-core:1.3", // only necessary if Hamcrest matchers are used
			  "cglib:cglib-nodep:2.2.2",          // allows mocking of classes (in addition to interfaces)
			  "org.objenesis:objenesis:1.2",    // allows mocking of classes without default constructor (together with CGLIB)
			  "org.powermock:powermock-module-junit4:1.5",
			  "org.powermock:powermock-api-mockito:1.5",
			  
			  'org.fluentlenium:fluentlenium-festassert:0.8.0' //https://github.com/FluentLenium/FluentLenium
		  
	providedCompile 'javax.servlet:servlet-api:2.5',
					'javax.servlet:jsp-api:2.0'
	
	compile "com.github.javarch:javarch-persistence:0.2-SNAPSHOT",
			 "com.github.javarch:javarch-jsf:0.2-SNAPSHOT",
			"com.github.javarch:javarch-support:0.2-SNAPSHOT",
			"com.h2database:h2:1.3.168",
			"org.primefaces.themes:bootstrap:1.0.10"
}



buildscript {
	repositories {
	    mavenCentral()
	}
	dependencies {
		classpath 'org.gradle.api.plugins:gradle-cargo-plugin:0.6'
	}
}

cargo {
	containerId = 'jetty7x'
	port = 9090
	context = 'quickstart'
	
	/**
	 * Assuming that we have Tomcat instance running at 192.168.1.101:8080 and 
	 * “tomcat” user with “manager” role created, we can deploy our app by using 
	 * “cargoDeployRemote” task. 
	 */
	remote {
			hostname = '192.168.1.101'
			username = 'tomcat'
			password = 'tomcat'
	}
	
	

	local {
		installer {
			installUrl = "http://download.eclipse.org/jetty/7.2.2.v20101205/dist/jetty-distribution-7.2.2.v20101205.tar.gz"
			downloadDir = file("$buildDir/download")
			extractDir = file("$buildDir/extract")
		}
	}
}

 
task integrationTest( type: Test, dependsOn: "test" ) {
	description = "Run integration tests"
	group = "Verification"	
	
	testClassesDir = sourceSets.integrationTest.output.classesDir
	classpath = sourceSets.integrationTest.runtimeClasspath	
		 
}

integrationTest.doFirst{
	println " > Iniciando jetty7x para executar os testes de integração..."
	
	tasks.jettyRun.contextPath = "javarchQuickstart"
	tasks.jettyRun.daemon=true
	tasks.jettyRun.execute()
}

integrationTest.doLast {
	println " > Finalizando o jetty7x para finalizar os testes de integração..."
	tasks.jettyStop.execute()
}


// Make sure 'check' task calls integration test
check.dependsOn integrationTest

httpPort = 8080
stopPort = 9451
stopKey = 'stopkey-javarch'
